{"version":3,"file":"radiance.js","sources":["@traceur/generated/TemplateParser/6","radiance.js","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["define($__placeholder__0, $__placeholder__1);","import {Color} from \"Color\";\nimport {intersect_scene} from \"scene\";\nimport {ReflectionType} from \"material\";\nimport {V,cross,normalize,multiply} from \"vector\";\nimport {Ray} from \"Ray\";\nimport {log} from \"log\";\nimport {kEPS} from \"Sphere\"; // TODO: もっといい場所に移動\n\nvar backgroundColor = new Color(0.0, 0.0, 0.0),\n    kDepth = 5, // ロシアンルーレットで打ち切らない最小数\n    kDpethLimit = 64; // ロシアンルーレットで打ち切り確率を上げるときの再帰数しきい値\n\n// TODO: 移動\nvar kIor = 1.5; // ガラスの屈折率\n\n/**\n * コサイン項を使った重点的サンプリング。\n * ランバート反射面において BRDFは(反射率)/π となる。\n * 確率密度関数を cos(x)/π とするとサンプリングすると効率がよいとのこと。\n * TODO: ここはよくわからない!!\n * @param u {numeric.T} wに対する正規直行基底。\n * @param v {numeric.T} wに対する正規直行基底。\n * @param w {numeric.T} 法線方向の単位ベクトル。\n * @returns {numeric.T} [u,v,x]空間の上を覆う半径1の半球上のどこかをさすベクトル\n */\nfunction sample_diffuse(u, v, w) {\n    var r1 = 2 * Math.PI * Math.random(),\n        r2 = Math.random(),\n        r2s = Math.sqrt(r2),\n        u_ = u.mul(Math.cos(r1) * r2s),\n        v_ = v.mul(Math.sin(r1) * r2s),\n        w_ = w.mul(Math.sqrt(1.0 - r2));\n\n    return normalize(u_.add(v_).add(w_));\n}\n\nfunction reflect(normal, ray) {\n    // TODO: ここも時間がないからよくわからない\n    var cos = normal.dot(ray.dir).x;\n    return ray.dir.sub(normal.mul(2.0 * cos));\n}\n\nexport function radiance(ray, depth) {\n    // debug用assert\n    // if (!ray.dir.x[0]) {\n    //     throw \"NaN found\";\n    // }\n\n    var intersection = intersect_scene(ray);\n    if (intersection == void 0) {\n        // log(\"black\", backgroundColor.asVector.x);\n        return backgroundColor.asVector;\n    }\n\n    var object = intersection.object,\n        hitpoint = intersection.hitPoint;\n\n    // 交差位置の法線（物体からのレイの入出を考慮）\n    // N・R < 0 のとき、２つのベクトルの角度は、180度以上になるので\n    var orienting_normal = hitpoint.normal.dot(ray.dir).x < 0.0\n        ? hitpoint.normal // レイが物体にあたっている場合\n        : (hitpoint.normal.mul(-1)); // レイが物体から出ている場合\n\n    // 色の反射率最大のものを得る。ロシアンルーレットで使う。\n    // ロシアンルーレットの閾値は任意だが色の反射率等を使うとより良い。\n    let russian_roulette_probability =\n        _.max([object.color.r, object.color.g, object.color.b]);\n\n    // 反射回数が一定以上になったらロシアンルーレットの確率を急上昇させる。（スタックオーバーフロー対策）\n    if (depth > kDpethLimit) {\n        russian_roulette_probability *= Math.pow(0.5, depth - kDpethLimit);\n    }\n\n    // ロシアンルーレットを実行し追跡を打ち切るかどうかを判断する。\n    // ただしDepth回の追跡は保障する。\n    if (depth > kDepth) {\n        if (Math.random() >= russian_roulette_probability) {\n            return object.emission.asVector;\n        }\n    } else { // 最小試行回数以下では必ずレイの追跡を続ける。\n        russian_roulette_probability = 1.0;\n    }\n\n    let incoming_radiance,\n        weight = 1.0,\n        dir; // 次のRayの方向\n\n    switch (object.reflection_type) {\n        // 完全拡散面\n        case ReflectionType.DIFFUSE: {\n            // orienting_normalの方向を基準とした正規直交基底(w, u, v)を作る。この基底に対する半球内で次のレイを飛ばす。\n            // ベクトルwと直交するベクトルを作る。\n            // w.xが0に近い場合とそうでない場合とで使うベクトルを変える。\n            var w = orienting_normal,\n                u = Math.abs(w.x[0]) > kEPS\n                    ? normalize(cross(V(0.0, 1.0, 0.0), w))\n                    : normalize(cross(V(1.0, 0.0, 0.0), w)),\n                v = cross(w, u);\n\n            // 次にレイを飛ばす方向をインポータンスサンプリングで取得。\n            dir = sample_diffuse(u, v, w);\n            // log(dir.x);\n\n            /*\n             レンダリング方程式に対するモンテカルロ積分を考えると、outgoing_radiance = weight * incoming_radiance。\n             ここで、weight = (ρ/π) * cosθ / pdf(ω) / R になる。\n             ρ/πは完全拡散面のBRDFでρは反射率、cosθはレンダリング方程式におけるコサイン項、pdf(ω)はサンプリング方向についての確率密度関数。\n             Rはロシアンルーレットの確率。\n             今、コサイン項に比例した確率密度関数によるサンプリングを行っているため、pdf(ω) = cosθ/π\n             よって、weight = ρ/ R。\n             */\n            incoming_radiance = radiance(new Ray(hitpoint.position, dir), depth+1);\n            weight = object.color.asVector.div(russian_roulette_probability);\n        } break;\n        case ReflectionType.SPECULAR: {\n            // 完全鏡面なのでレイの反射方向は決定的。\n            // ロシアンルーレットの確率で除算するのは上と同じ。\n            dir = reflect(hitpoint.normal, ray);\n            incoming_radiance = radiance(new Ray(hitpoint.position, dir), depth+1);\n            weight = object.color.asVector.div(russian_roulette_probability);\n        } break;\n\n        case ReflectionType.REFRACTION: {\n            // 屈折率kIorのガラス\n            var reflection_ray = new Ray(hitpoint.position, reflect(hitpoint.normal, ray)),\n                into = hitpoint.normal.dot(orienting_normal).x > 0.0; // レイがオブジェクトから出るのか、入るのか\n            // Snellの法則\n            var nc = 1.0, // 真空の屈折率\n                nt = kIor, // オブジェクトの屈折率\n                nnt = into ? nc / nt : nt / nc,\n                ddn = ray.dir.dot(orienting_normal).x,\n                cos2t = 1.0 - nnt * nnt * (1.0 - ddn * ddn);\n\n            if (cos2t < 0.0) { // 全反射\n                incoming_radiance = radiance(reflection_ray, depth+1);\n                weight = object.color.asVector.div(russian_roulette_probability);\n                break;\n            }\n\n            // 屈折の方向\n            var r1 = ray.dir.mul(nnt),\n                r2 = hitpoint.normal.mul(into ? 1.0 : -1.0).mul(ddn * nnt + Math.sqrt(cos2t)),\n                refraction_ray = new Ray(hitpoint.position, normalize(r1.sub(r2)));\n\n            // SchlickによるFresnelの反射係数の近似を使う\n            var a = nt - nc,\n                b = nt + nc,\n                R0 = Math.pow(a, 2) / Math.pow(b, 2),\n                c = 1.0 - (into ? -ddn : refraction_ray.dir.dot(orienting_normal.mul(-1.0)).x);\n\n            // 反射方向の光が反射してray.dirの方向に運ぶ割合。同時に屈折方向の光が反射する方向に運ぶ割合。\n            var Re = R0 + (1.0 - R0) * Math.pow(c, 5.0);\n            // レイの運ぶ放射輝度は屈折率の異なる物体間を移動するとき、屈折率の比の二乗の分だけ変化する。\n            var nnt2 = Math.pow(into ? nc / nt : nt / nc, 2.0);\n            // 屈折方向の光が屈折してray.dirの方向に運ぶ割合\n            var Tr = (1.0 - Re) * nnt2;\n\n            // 一定以上レイを追跡したら屈折と反射のどちらか一方を追跡する。（さもないと指数的にレイが増える）\n            // ロシアンルーレットで決定する。\n            var probability = 0.25 + 0.5 * Re,\n                reflect_radiance = () => {return radiance(reflection_ray, depth+1).mul(Re); },\n                refract_radiance = () => {return radiance(refraction_ray, depth+1).mul(Tr); };\n            if (depth > 2) {\n                if (Math.random() < probability) { // 反射\n                    incoming_radiance = reflect_radiance();\n                    weight = object.color.asVector.div(probability * russian_roulette_probability);\n                } else { // 屈折\n                    incoming_radiance = refract_radiance();\n                    weight = object.color.asVector.div((1.0 - probability) * russian_roulette_probability);\n                }\n            } else { // 屈折と反射の両方を追跡\n                incoming_radiance = reflect_radiance().add(refract_radiance());\n                weight = object.color.asVector.div(russian_roulette_probability);\n            }\n        } break;\n    }\n\n\n    // return now_object.emission + multiply(weight, incoming_radiance);\n\n    // フラットシェーディング\n    // return object.color.asVector;\n\n    // パストレーシング\n    return object.emission.asVector.add(multiply(weight, incoming_radiance));\n}\n","function($__placeholder__0) {\n      $__placeholder__1\n    }","if (!$__placeholder__0 || !$__placeholder__1.__esModule)\n            $__placeholder__2 = { 'default': $__placeholder__3 }","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}