{"version":3,"file":"vector.js","sources":["@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/5","vector.js","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"AAAA,MAAM,ICAN,UAAS,AAAiB;;CCInB,SAAS,EAAC,CAAC,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAE;CACvB,SAAO,IAAI,CAAA,OAAO,EAAE,CAAC,CAAC,CAAC,CAAE,EAAC,CAAE,EAAC,CAAC,CAAC,CAAC;GACnC;AAOM,CAPN,SAOe,UAAS,CAAC,CAAC,CAAE;CACzB,SAAO,CAAA,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;GAC3B;AAQM,CARN,SAQe,MAAK,CAAC,EAAE,CAAE,CAAA,EAAE;OAClB,CAAA,CAAC,EAAG,CAAA,EAAE,EAAE;AACV,CAAA,QAAC,EAAG,CAAA,EAAE,EAAE;CACZ,SAAO,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAA,CAAG,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CACtB,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAA,CAAG,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CACrB,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAA,CAAG,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GAClC;CAQM,SAAS,SAAQ,CAAC,EAAE,CAAE,CAAA,EAAE;OACrB,CAAA,CAAC,EAAG,CAAA,EAAE,EAAE;AACV,CAAA,QAAC,EAAG,CAAA,EAAE,EAAE;CAEZ,SAAO,CAAA,CAAC,CACJ,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CACT,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CACT,CAAA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GAClB;CC7CD;CCAA,UAAwB;CAAE,cAAyB;KAAE;CAArD,kBAAwB;CAAE,sBAAyB;KAAE;CAArD,cAAwB;CAAE,kBAAyB;KAAE;CAArD,iBAAwB;CAAE,qBAAyB;KAAE;ACArD,CAAA,aAAU,CAAE,KAAI;CAAA,GFAQ;CFEnB,CDFuC,CAAC;CE8C7C","sourcesContent":["define($__placeholder__0, $__placeholder__1);","function($__placeholder__0) {\n      $__placeholder__1\n    }","/**\n * 新しいベクトルを生成するファクトリメソッド。\n * @returns {numeric.T} 新しいベクトル\n */\nexport function V(x, y, z) {\n    return new numeric.T([x, y, z]);\n}\n\n/**\n * 正規化ベクトルを計算する。\n * @param v 対象のベクトル\n * @returns {numeric.T} 正規化したベクトル\n */\nexport function normalize(v) {\n    return v.div(v.norm2());\n}\n\n/**\n * ベクトルの外積を計算する。\n * @param v1 左辺値\n * @param v2 右辺値\n * @returns {numeric.T} 計算された外積\n */\nexport function cross(v1, v2) {\n    const a = v1.x,\n        b = v2.x;\n    return V(a[1]*b[2] - a[2]*b[1],\n            a[0]*b[2] - a[2]*b[0],\n            a[0]*b[1] - a[1]*b[0]);\n}\n\n/**\n * ベクトルの要素それぞれのかけ算。これといった名前はない?\n * @param v1 左辺値\n * @param v2 右辺値\n * @returns {numeric.T} 計算結果\n */\nexport function multiply(v1, v2) {\n    const a = v1.x,\n        b = v2.x;\n    // console.log(\"multigly\", a,b);\n    return V(\n        a[0]*b[0],\n        a[1]*b[1],\n        a[2]*b[2]);\n}\n","return $__placeholder__0","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}